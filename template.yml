apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: spring-boot-template
  title: Spring Boot Template
  description: Create a simple Spring Boot application
spec:
  owner: shivanidubey@example.com
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Enter Group
      required:
        - group
      properties:
        group:
          title: Group
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Enter Package name
      required:
        - package
      properties:
        package:
          title: Package
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Enter environment
      required:
        - environment
      properties:
        environment:
          title: environment
          type: string
          # if: $.parameters.environment === "development"
          # then:
          #   - print: "Welcome!!!!!"
          description: Enter  staging/development
          ui:autofocus: true
          ui:options:
            rows: 5 
  set: 
  condition1: {{parameters.environment}}
  if: $.condition1 === "development"
  then:
    - print: "Welcome!!!!!"
      # job:
      # script: "Struggling with syntax"
      # parameters.environment : "def"
      # rules:
      #     if: ${{ parameters.environment === "staging" and parameters.environment === "development" }}
  # field:  ${{parameters.environment}}
  # {{#if field}}

  # {{else}}

  # {{/if}}
          
          # action: debug:log
          # input:
          #   message: 'development step'
      # else:
      # action: debug:log
      # input:
      #   message: 'development step'

    # - name: Only production environments
    #   if: ${{ parameters.environment === "prod" or parameters.environment === "production" }}
    #   action: debug:log
    #   input:
    #     message: 'production step'

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./demo
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          environment: ${{parameters.environment}}
          group: ${{parameters.group}}
          package: ${{parameters.package}}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
